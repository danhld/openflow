//
// Generated file, do not edit! Created by nedtool 5.1 from inet/linklayer/ethernet/EtherFrame.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __INET_ETHERFRAME_M_H
#define __INET_ETHERFRAME_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0501
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif

// cplusplus {{
#include "inet/linklayer/ethernet/Ethernet.h"
#include "inet/linklayer/common/MACAddress.h"
#include "inet/linklayer/common/Ieee802Ctrl_m.h" // for enums
// }}


namespace inet {

/**
 * Class generated from <tt>inet/linklayer/ethernet/EtherFrame.msg:40</tt> by nedtool.
 * <pre>
 * //
 * // Abstract base class for various Ethernet traffic types:
 * // EtherJam, EtherFilledIFG and EtherPhyFrame.
 * //
 * packet EtherTraffic
 * {
 * }
 * </pre>
 */
class INET_API EtherTraffic : public ::omnetpp::cPacket
{
  protected:

  private:
    void copy(const EtherTraffic& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EtherTraffic&);

  public:
    EtherTraffic(const char *name=nullptr, short kind=0);
    EtherTraffic(const EtherTraffic& other);
    virtual ~EtherTraffic();
    EtherTraffic& operator=(const EtherTraffic& other);
    virtual EtherTraffic *dup() const override {return new EtherTraffic(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EtherTraffic& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EtherTraffic& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ethernet/EtherFrame.msg:47</tt> by nedtool.
 * <pre>
 * //
 * // Represents jam on the Ethernet.
 * //
 * packet EtherJam extends EtherTraffic
 * {
 *     long abortedPkTreeID = 0;  // this field stores the packetTreeId of the aborted packet
 * }
 * </pre>
 */
class INET_API EtherJam : public ::inet::EtherTraffic
{
  protected:
    long abortedPkTreeID;

  private:
    void copy(const EtherJam& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EtherJam&);

  public:
    EtherJam(const char *name=nullptr, short kind=0);
    EtherJam(const EtherJam& other);
    virtual ~EtherJam();
    EtherJam& operator=(const EtherJam& other);
    virtual EtherJam *dup() const override {return new EtherJam(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual long getAbortedPkTreeID() const;
    virtual void setAbortedPkTreeID(long abortedPkTreeID);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EtherJam& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EtherJam& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ethernet/EtherFrame.msg:56</tt> by nedtool.
 * <pre>
 * //
 * // Represents a filled inter-frame gap in burst mode.
 * // Also used for calculating IFG times.
 * //
 * packet EtherFilledIFG extends EtherTraffic
 * {
 *     bitLength = INTERFRAME_GAP_BITS;
 * }
 * </pre>
 */
class INET_API EtherFilledIFG : public ::inet::EtherTraffic
{
  protected:

  private:
    void copy(const EtherFilledIFG& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EtherFilledIFG&);

  public:
    EtherFilledIFG(const char *name=nullptr, short kind=0);
    EtherFilledIFG(const EtherFilledIFG& other);
    virtual ~EtherFilledIFG();
    EtherFilledIFG& operator=(const EtherFilledIFG& other);
    virtual EtherFilledIFG *dup() const override {return new EtherFilledIFG(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EtherFilledIFG& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EtherFilledIFG& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ethernet/EtherFrame.msg:69</tt> by nedtool.
 * <pre>
 * //
 * // Represents an Ethernet PHY frame.
 * //
 * // Contains:
 * //  - preamble: not stored (only contributes to length)
 * //  - SFD: not stored (only contributes to length)
 * //  - encapsulated EtherFrame with padding and FCS
 * //
 * packet EtherPhyFrame extends EtherTraffic
 * {
 *     \@customize(true);
 *     byteLength = PREAMBLE_BYTES + SFD_BYTES;
 *     bool srcMacFullDuplex;  // meta-info, for detecting model misconfiguration 
 * }
 * </pre>
 *
 * EtherPhyFrame_Base is only useful if it gets subclassed, and EtherPhyFrame is derived from it.
 * The minimum code to be written for EtherPhyFrame is the following:
 *
 * <pre>
 * class INET_API EtherPhyFrame : public EtherPhyFrame_Base
 * {
 *   private:
 *     void copy(const EtherPhyFrame& other) { ... }

 *   public:
 *     EtherPhyFrame(const char *name=nullptr, short kind=0) : EtherPhyFrame_Base(name,kind) {}
 *     EtherPhyFrame(const EtherPhyFrame& other) : EtherPhyFrame_Base(other) {copy(other);}
 *     EtherPhyFrame& operator=(const EtherPhyFrame& other) {if (this==&other) return *this; EtherPhyFrame_Base::operator=(other); copy(other); return *this;}
 *     virtual EtherPhyFrame *dup() const override {return new EtherPhyFrame(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from EtherPhyFrame_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(EtherPhyFrame)
 * </pre>
 */
class INET_API EtherPhyFrame_Base : public ::inet::EtherTraffic
{
  protected:
    bool srcMacFullDuplex;

  private:
    void copy(const EtherPhyFrame_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EtherPhyFrame_Base&);
    // make constructors protected to avoid instantiation
    EtherPhyFrame_Base(const char *name=nullptr, short kind=0);
    EtherPhyFrame_Base(const EtherPhyFrame_Base& other);
    // make assignment operator protected to force the user override it
    EtherPhyFrame_Base& operator=(const EtherPhyFrame_Base& other);

  public:
    virtual ~EtherPhyFrame_Base();
    virtual EtherPhyFrame_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class EtherPhyFrame");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual bool getSrcMacFullDuplex() const;
    virtual void setSrcMacFullDuplex(bool srcMacFullDuplex);
};

/**
 * Class generated from <tt>inet/linklayer/ethernet/EtherFrame.msg:87</tt> by nedtool.
 * <pre>
 * //
 * // Common base class for classes representing Ethernet II and 802.3 frame types,
 * // containing their common header fields.
 * //
 * // This class should never be instantiated by the models, only specific
 * // subclasses: ~EthernetIIFrame, ~EtherFrameWithLLC and ~EtherFrameWithSNAP.
 * //
 * // Source and destination MAC address are stored in data members.
 * // Packet length includes Etherner header, payload, padding and FCS.
 * // Payload length can be accessed as getEncapsulatedPacket()->getByteLength().
 * //
 * packet EtherFrame
 * {
 *     MACAddress dest;
 *     MACAddress src;
 * }
 * </pre>
 */
class INET_API EtherFrame : public ::omnetpp::cPacket
{
  protected:
    MACAddress dest;
    MACAddress src;

  private:
    void copy(const EtherFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EtherFrame&);

  public:
    EtherFrame(const char *name=nullptr, short kind=0);
    EtherFrame(const EtherFrame& other);
    virtual ~EtherFrame();
    EtherFrame& operator=(const EtherFrame& other);
    virtual EtherFrame *dup() const override {return new EtherFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual MACAddress& getDest();
    virtual const MACAddress& getDest() const {return const_cast<EtherFrame*>(this)->getDest();}
    virtual void setDest(const MACAddress& dest);
    virtual MACAddress& getSrc();
    virtual const MACAddress& getSrc() const {return const_cast<EtherFrame*>(this)->getSrc();}
    virtual void setSrc(const MACAddress& src);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EtherFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EtherFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ethernet/EtherFrame.msg:100</tt> by nedtool.
 * <pre>
 * //
 * // Ethernet II headers contain a 16-bit ~EtherType to identify
 * // the encapsulated protocol.
 * //
 * // Header length: src(6)+dest(6)+etherType(2) + FCS(4) = 18 bytes
 * //
 * packet EthernetIIFrame extends EtherFrame
 * {
 *     byteLength = ETHER_MAC_FRAME_BYTES;
 *     int etherType \@enum(EtherType);
 * }
 * </pre>
 */
class INET_API EthernetIIFrame : public ::inet::EtherFrame
{
  protected:
    int etherType;

  private:
    void copy(const EthernetIIFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EthernetIIFrame&);

  public:
    EthernetIIFrame(const char *name=nullptr, short kind=0);
    EthernetIIFrame(const EthernetIIFrame& other);
    virtual ~EthernetIIFrame();
    EthernetIIFrame& operator=(const EthernetIIFrame& other);
    virtual EthernetIIFrame *dup() const override {return new EthernetIIFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getEtherType() const;
    virtual void setEtherType(int etherType);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EthernetIIFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EthernetIIFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ethernet/EtherFrame.msg:112</tt> by nedtool.
 * <pre>
 * //
 * // Ethernet frame with 802.3 LLC header.
 * //
 * // Header length: src(6)+dest(6)+length(2)+ssap(1)+dsap(1)+control(1) + FCS(4) = 21 bytes
 * //
 * packet EtherFrameWithLLC extends EtherFrame
 * {
 *     byteLength = ETHER_MAC_FRAME_BYTES + ETHER_LLC_HEADER_LENGTH;
 *     int dsap;
 *     int ssap;
 *     int control;
 * }
 * </pre>
 */
class INET_API EtherFrameWithLLC : public ::inet::EtherFrame
{
  protected:
    int dsap;
    int ssap;
    int control;

  private:
    void copy(const EtherFrameWithLLC& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EtherFrameWithLLC&);

  public:
    EtherFrameWithLLC(const char *name=nullptr, short kind=0);
    EtherFrameWithLLC(const EtherFrameWithLLC& other);
    virtual ~EtherFrameWithLLC();
    EtherFrameWithLLC& operator=(const EtherFrameWithLLC& other);
    virtual EtherFrameWithLLC *dup() const override {return new EtherFrameWithLLC(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getDsap() const;
    virtual void setDsap(int dsap);
    virtual int getSsap() const;
    virtual void setSsap(int ssap);
    virtual int getControl() const;
    virtual void setControl(int control);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EtherFrameWithLLC& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EtherFrameWithLLC& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ethernet/EtherFrame.msg:130</tt> by nedtool.
 * <pre>
 * //
 * // Ethernet frame with 802.3 LLC and SNAP headers.
 * //
 * // The ssap, dsap and control LLC fields are set to fixed values in the
 * // frame: 0xAA, 0xAA, 0x03.
 * //
 * // Header length: src(6)+dest(6)+length(2)+ssap(1)+dsap(1)+control(1)+
 * // orgCode(3)+localCode(2) + FCS(4) = 26 bytes
 * //
 * packet EtherFrameWithSNAP extends EtherFrameWithLLC
 * {
 *     byteLength = ETHER_MAC_FRAME_BYTES + ETHER_LLC_HEADER_LENGTH + ETHER_SNAP_HEADER_LENGTH;
 *     dsap = 0xAA;
 *     ssap = 0xAA;
 *     control = 0x03;
 *     int orgCode;   // organizationally unique identifier (OUI); 0 for protocols that have an EtherType (ARP, IPv4, IPv6, etc.)
 *     int localcode; // protocol identifier (PID); stores ~EtherType if orgCode is 0
 * }
 * </pre>
 */
class INET_API EtherFrameWithSNAP : public ::inet::EtherFrameWithLLC
{
  protected:
    int orgCode;
    int localcode;

  private:
    void copy(const EtherFrameWithSNAP& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EtherFrameWithSNAP&);

  public:
    EtherFrameWithSNAP(const char *name=nullptr, short kind=0);
    EtherFrameWithSNAP(const EtherFrameWithSNAP& other);
    virtual ~EtherFrameWithSNAP();
    EtherFrameWithSNAP& operator=(const EtherFrameWithSNAP& other);
    virtual EtherFrameWithSNAP *dup() const override {return new EtherFrameWithSNAP(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getOrgCode() const;
    virtual void setOrgCode(int orgCode);
    virtual int getLocalcode() const;
    virtual void setLocalcode(int localcode);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EtherFrameWithSNAP& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EtherFrameWithSNAP& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ethernet/EtherFrame.msg:144</tt> by nedtool.
 * <pre>
 * //
 * // Ethernet frame used by the PAUSE protocol
 * //
 * packet EtherPauseFrame extends EtherFrame
 * {
 *     int pauseTime; // in 512 bit-time units
 * }
 * </pre>
 */
class INET_API EtherPauseFrame : public ::inet::EtherFrame
{
  protected:
    int pauseTime;

  private:
    void copy(const EtherPauseFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EtherPauseFrame&);

  public:
    EtherPauseFrame(const char *name=nullptr, short kind=0);
    EtherPauseFrame(const EtherPauseFrame& other);
    virtual ~EtherPauseFrame();
    EtherPauseFrame& operator=(const EtherPauseFrame& other);
    virtual EtherPauseFrame *dup() const override {return new EtherPauseFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getPauseTime() const;
    virtual void setPauseTime(int pauseTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EtherPauseFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EtherPauseFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ethernet/EtherFrame.msg:152</tt> by nedtool.
 * <pre>
 * //
 * // Ethernet 802.1Q Tag.
 * //
 * packet Ethernet1QTag
 * {
 *     uint8_t pcp;    // Priority Code Point (PCP): a 3-bit field which refers to the IEEE 802.1p priority. It indicates the frame priority level.
 *                     // Values are from 0 (best effort) to 7 (highest); 1 represents the lowest priority.
 *     bool de;        // Drop Eligible (DE): a 1-bit field. May be used separately or in conjunction with PCP to indicate frames eligible to be dropped in the presence of congestion.
 *     short VID = 0;   // VLAN Identifier (VID): a 12-bit field specifying the VLAN to which the frame belongs.
 *                     // The hexadecimal values of 0x000 and 0xFFF are reserved. All other values may be used as VLAN identifiers, allowing up to 4,094 VLANs.
 *                     // The reserved value 0x000 indicates that the frame does not belong to any VLAN; in this case,
 *                     // the 802.1Q tag specifies only a priority and is referred to as a priority tag. On bridges,
 *                     // VLAN 1 (the default VLAN ID) is often reserved for a management VLAN; this is vendor-specific.
 * }
 * </pre>
 */
class INET_API Ethernet1QTag : public ::omnetpp::cPacket
{
  protected:
    uint8_t pcp;
    bool de;
    short VID;

  private:
    void copy(const Ethernet1QTag& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ethernet1QTag&);

  public:
    Ethernet1QTag(const char *name=nullptr, short kind=0);
    Ethernet1QTag(const Ethernet1QTag& other);
    virtual ~Ethernet1QTag();
    Ethernet1QTag& operator=(const Ethernet1QTag& other);
    virtual Ethernet1QTag *dup() const override {return new Ethernet1QTag(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint8_t getPcp() const;
    virtual void setPcp(uint8_t pcp);
    virtual bool getDe() const;
    virtual void setDe(bool de);
    virtual short getVID() const;
    virtual void setVID(short VID);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ethernet1QTag& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ethernet1QTag& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ethernet/EtherFrame.msg:168</tt> by nedtool.
 * <pre>
 * //
 * // Ethernet 802.1ah header.
 * //
 * packet Ethernet1ahITag
 * {
 *     int ISid = 0; // ISID
 * }
 * </pre>
 */
class INET_API Ethernet1ahITag : public ::omnetpp::cPacket
{
  protected:
    int ISid;

  private:
    void copy(const Ethernet1ahITag& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ethernet1ahITag&);

  public:
    Ethernet1ahITag(const char *name=nullptr, short kind=0);
    Ethernet1ahITag(const Ethernet1ahITag& other);
    virtual ~Ethernet1ahITag();
    Ethernet1ahITag& operator=(const Ethernet1ahITag& other);
    virtual Ethernet1ahITag *dup() const override {return new Ethernet1ahITag(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getISid() const;
    virtual void setISid(int ISid);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ethernet1ahITag& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ethernet1ahITag& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_ETHERFRAME_M_H

